{%- macro render_model(model) %}
class {{ model.name }}(BaseModel):
    """
    {{ model.description }}
    """

    def __init__(self):

        # declare constants
        {%- for const in model.c %}
        {{ const.name }} = {{ render_expression(expr=const.value) }};
        {%- endfor %}

        # declare parameters
        {%- for param in model.p %}
        {{ param.name }} = ca.SX.sym('{{ param.name }}');
        {%- endfor %}
        self.p = ca.vertcat(
        {%- for param in model.p %}
            {{ param.name }}{% if not loop.last %},{% endif %}
        {%- endfor %});
        self.p0 = {
        {%- for param in model.p %}
            '{{ param.name }}': {{ render_expression(expr=param.value) -}}
                {% if not loop.last %},{% endif %}
        {%- endfor %}
        };

        # declare discrete states
        {%- for var in model.z %}
        {{ var.name }} = ca.SX.sym('{{ var.name }}');
        {%- endfor %}
        self.z = ca.vertcat(
        {%- for var in model.z %}
            {{ var.name }}{% if not loop.last %},{% endif %}
        {%- endfor %});
        self.z0 = {
        {%- for var in model.z %}
            '{{ var.name }}': {{ render_expression(expr=param.value) -}}
            {% if not loop.last %},{% endif %}
        {%- endfor %}
        };

        # declare inputs
        {%- for var in model.u %}
        {{ var.name }} = ca.SX.sym('{{ var.name }}');
        {%- endfor %}
        self.u = ca.vertcat(
        {%- for var in model.u %}
            {{ var.name }}{% if not loop.last %},{% endif %}
        {%- endfor %});

        # declare outputs
        {%- for var in model.y %}
        {{ var.name }} = ca.SX.sym('{{ var.name }}');
        {%- endfor %}
        self.y = ca.vertcat(
        {%- for var in model.y %}
            {{ var.name }}{% if not loop.last %},{% endif %}
        {%- endfor %});

        # declare continuous states
        {%- for var in model.x %}
        {{ var.name }} = ca.SX.sym('{{ var.name }}');
        {%- endfor %}
        self.x = ca.vertcat(
        {%- for var in model.x %}
            {{ var.name }}{% if not loop.last %},{% endif %}
        {%- endfor %});
        self.x0 = {
        {%- for var in model.x %}
            '{{ var.name }}': {{ render_expression(expr=var.start) -}}
            {% if not loop.last %},{% endif %}
        {%- endfor %}
        };

        # ode
        self.ode = ca.vertcat(
        {%- for expr in model.ode %}
            {{ render_expression(expr=expr) }}{% if not loop.last %},{% endif %}
        {%- endfor %});

        # alg
        self.alg = ca.vertcat()

{%- endmacro %}

{%- macro binary(op, expr) %}
    {{- render_expression(expr=expr.lhs) }}{{ op }}{{ render_expression(expr=expr.rhs) -}}
{%- endmacro -%}

{%- macro unary(op, expr) %}
    {{- op }}{{ render_expression(expr=expr.rhs) -}}
{%- endmacro -%}

{%- macro render_expression(expr) %}
    {%- if "UnsignedReal" in expr -%}
        {{ expr.UnsignedReal }}
    {%- elif "UnsignedInteger" in expr -%}
        {{ expr.UnsignedInteger }}
    {%- elif "Ref" in expr -%}
        {{ expr.Ref.comp.name }}
    {%- elif "Add" in expr -%}
        {{ binary(op=" + ", expr=expr.Add) -}}
    {%- elif "Sub" in expr -%}
        {{ binary(op=" - ", expr=expr.Sub) -}}
    {%- elif "Mul" in expr -%}
        {{ binary(op="*", expr=expr.Mul) -}}
    {%- elif "Div" in expr -%}
        {{ binary(op="/", expr=expr.Div) -}}
    {%- elif "Exp" in expr -%}
        {{- binary(op="^", expr=expr.Exp) -}}
    {%- elif "Negative" in expr -%}
        {{ unary(op="-", expr=expr.Negative) -}}
    {%- elif "Parenthesis" in expr -%}
        ( {{- render_expression(expr=expr.Parenthesis.rhs) -}} )
    {%- elif "Not" in expr %}
        {{- unary(op="!", expr=expr.Not) -}}
    {%- elif "Or" in expr -%}
        ca.logic_or(
            {{- render_expression(expr=expr.Or.lhs) -}},
            {{- render_expression(expr=expr.Or.rhs) -}})
    {%- elif "And" in expr -%}
        ca.logic_and(
            {{- render_expression(expr=expr.And.lhs) -}},
            {{- render_expression(expr=expr.And.rhs) -}})
    {%- elif "Equal" in expr -%}
            {{- render_expression(expr=expr.Equal.lhs) -}} ==
            {{- render_expression(expr=expr.Equal.rhs) -}}
    {%- endif %}
{%- endmacro -%}

"""
RAW JSON STRUCT:
{{ model | pprint }}
"""

import casadi as ca
import numpy as np

class BaseModel:

    def __repr__(self):
        return repr(self.__dict__)

    def simulate(self, t=None, u=None):
        if t is None:
            t = np.arange(0, 1, 0.01)
        if u is None:
            u = 0

        p0 = np.array([self.p0[k] for k in self.p0.keys()]);
        z0 = np.array([self.z0[k] for k in self.z0.keys()]);
        x0 = np.array([self.x0[k] for k in self.x0.keys()]);

        F = ca.integrator(
            'F', 'idas',
            {'x': self.x, 'z': self.z, 'p': self.p, 'u': self.u, 'ode': self.ode, 'alg': self.alg},
            t[0], t)

        res = F(x0=x0, z0=z0, p=p0, u=u)
        return {
            't': t,
            'x': res['xf'].T
        }
    
    def linearize(self):
        A = ca.jacobian(self.ode, self.x)
        B = ca.jacobian(self.ode, self.u)
        C = ca.jacobian(self.y, self.x)
        D = ca.jacobian(self.y, self.u)
        return (A, B, C, D)

{{ render_model(model=model) }}