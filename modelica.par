%start stored_definition
%title "Modelica grammar"
%comment "Empty grammar generated by `parol`"
%line_comment "//"
%user_type UtStoredDefinition = crate::modelica_grammar::StoredDefinition
%user_type UtClassDefinition = crate::modelica_grammar::ClassDefinition
%user_type UtClassPrefixes = crate::modelica_grammar::ClassPrefixes
%user_type UtClassPrefixes = crate::modelica_grammar::ClassPrefixes
%user_type UtClassType = crate::modelica_grammar::ClassType
%user_type UtClassSpecifier = crate::modelica_grammar::ClassSpecifier
%user_type UtComposition = crate::modelica_grammar::Composition
%user_type UtElementList = crate::modelica_grammar::ElementList
%user_type UtElement = crate::modelica_grammar::Element
%user_type UtComponentClause = crate::modelica_grammar::ComponentClause
%user_type UtComponentList = crate::modelica_grammar::ComponentList
%user_type UtComponentDeclaration = crate::modelica_grammar::ComponentDeclaration
%user_type UtDeclaration = crate::modelica_grammar::Declaration
%user_type UtTypePrefix = crate::modelica_grammar::TypePrefix
%user_type UtTypeSpecifier = crate::modelica_grammar::TypeSpecifier
%user_type UtEquationSection = crate::modelica_grammar::EquationSection
%user_type UtIdent = crate::modelica_grammar::Ident
%user_type UtSomeEquation = crate::modelica_grammar::SomeEquation
%user_type UtSimpleExpression = crate::modelica_grammar::SimpleExpression
%user_type UtLogicalExpression = crate::modelica_grammar::LogicalExpression
%user_type UtLogicalTerm = crate::modelica_grammar::LogicalTerm
%user_type UtLogicalFactor = crate::modelica_grammar::LogicalFactor
%user_type UtRelation = crate::modelica_grammar::Relation
%user_type UtRelationalOperator = crate::modelica_grammar::RelationalOperator
%user_type UtArithmeticExpression = crate::modelica_grammar::ArithmeticExpression
%user_type UtAddOperator = crate::modelica_grammar::AddOperator
%user_type UtTerm = crate::modelica_grammar::Term
%user_type UtMulOperator = crate::modelica_grammar::MulOperator
%user_type UtFactor = crate::modelica_grammar::Factor
%user_type UtPrimary = crate::modelica_grammar::Primary
%user_type UtComponentReference = crate::modelica_grammar::ComponentReference
%user_type UtUnsignedInteger = crate::modelica_grammar::UnsignedInteger
%user_type UtName = crate::modelica_grammar::Name

%%

//-----------------------------------------------------------------------------
stored_definition
    : auto_stored_definition: UtStoredDefinition
    ;

auto_stored_definition
    : [ 'within'^ [ name ] ';'^ ] { class_definition ';'^ }
    ;

//-----------------------------------------------------------------------------
class_definition
    : auto_class_definition: UtClassDefinition
    ;

auto_class_definition
    : [ 'encapsulated' ] class_prefixes class_specifier
    ;

//-----------------------------------------------------------------------------
class_prefixes
    : auto_class_prefixes: UtClassPrefixes
    ;

auto_class_prefixes
    : [ 'partial' ] class_type
    ;

//-----------------------------------------------------------------------------
class_type
    : auto_class_type: UtClassType
    ;

auto_class_type
    : 'class'
    | 'model'
    | [ 'operator' ] 'record'
    | 'block'
    | [ 'expandable' ] 'connector'
    | 'type'
    | 'package'
    | [ 'pure' | 'impure' ] [ 'operator' ] 'function'
    | 'operator'
    ;

//-----------------------------------------------------------------------------
class_specifier
    : auto_class_specifier: UtClassSpecifier
    ;

auto_class_specifier
    : long_class_specifier
    ;

//-----------------------------------------------------------------------------
long_class_specifier
    : auto_long_class_specifier: UtClassSpecifier
    ;

auto_long_class_specifier
    : ident composition 'end'^ ident
    ;

//-----------------------------------------------------------------------------
composition
    : auto_composition: UtComposition
    ;

auto_composition
    : element_list { equation_section }
    ;

//----------------------------------------------------------------------------
element_list
    : auto_element_list: UtElementList
    ;

auto_element_list
    : { element ';'^ }
    ;

//-----------------------------------------------------------------------------
element
    : auto_element: UtElement
    ;

auto_element
    : component_clause
    ;

//-----------------------------------------------------------------------------
component_clause
    : auto_component_clause: UtComponentClause
    ;

auto_component_clause
    : type_prefix type_specifier component_list
    ;

//-----------------------------------------------------------------------------
component_list
    : auto_component_list: UtComponentList
    ;

auto_component_list
    : component_declaration { ','^ component_declaration }
    ;

//-----------------------------------------------------------------------------
component_declaration
    : auto_component_declaration: UtComponentDeclaration
    ;

auto_component_declaration
    : declaration
    ;

//-----------------------------------------------------------------------------
declaration
    : auto_declaration: UtDeclaration
    ;

auto_declaration
    : ident
    ;

//-----------------------------------------------------------------------------
type_prefix
    : auto_type_prefix: UtTypePrefix
    ;

auto_type_prefix
    : [ 'flow' | 'stream' ] [ 'discrete' | 'parameter' | 'constant' ] [ 'input' | 'output' ]
    ;

//-----------------------------------------------------------------------------
type_specifier
    : auto_type_specifier: UtTypeSpecifier
    ;

auto_type_specifier
    : [ '.' ] name
    ;

//-----------------------------------------------------------------------------
equation_section
    : auto_equation_section: UtEquationSection
    ;

auto_equation_section
    : 'equation'^ { some_equation ';'^ }
    ;

//-----------------------------------------------------------------------------
ident
    : auto_ident: UtIdent
    ;

auto_ident
    : /[A-Za-z][A-Za-z0-9_]*/
    ;

//-----------------------------------------------------------------------------
some_equation
    : auto_some_equation: UtSomeEquation
    ;

auto_some_equation
    : simple_expression '='^ simple_expression
    ;

//-----------------------------------------------------------------------------
simple_expression
    : auto_simple_expression: UtSimpleExpression
    ;

auto_simple_expression
    : logical_expression [ ':'^ logical_expression [ ':'^ logical_expression ] ]
    ;

//-----------------------------------------------------------------------------
logical_expression
    : auto_logical_expression: UtLogicalExpression
    ;

auto_logical_expression
    : logical_term { 'or'^ logical_term }
    ;

//-----------------------------------------------------------------------------
logical_term
    : auto_logical_term: UtLogicalTerm
    ;

auto_logical_term
    : logical_factor { 'and'^ logical_factor }
    ;

//-----------------------------------------------------------------------------
logical_factor
    : auto_logical_factor: UtLogicalFactor
    ;

auto_logical_factor
    : [ 'not' ] relation
    ;

//-----------------------------------------------------------------------------
relation
    : auto_relation: UtRelation
    ;

auto_relation
    : arithmetic_expression [ relational_operator arithmetic_expression ]
    ;

//-----------------------------------------------------------------------------
relational_operator
    : auto_relational_operator: UtRelationalOperator
    ;

auto_relational_operator
    : '<'
    | '<='
    | '>'
    | '>='
    | '=='
    | '<>'
    ;

//-----------------------------------------------------------------------------
arithmetic_expression
    : auto_arithmetic_expression: UtArithmeticExpression
    ;

auto_arithmetic_expression
    : [ add_operator ] term { add_operator term }
    ;

//-----------------------------------------------------------------------------
add_operator
    : auto_add_operator: UtAddOperator
    ;

auto_add_operator
    : '+'
    | '-'
    | '.+'
    | '.-'
    ;

//-----------------------------------------------------------------------------
term: auto_term: UtTerm
    ;

auto_term
    : factor { mul_operator factor }
    ;

//-----------------------------------------------------------------------------
mul_operator
    : auto_mul_operator: UtMulOperator
    ;

auto_mul_operator
    : '*'
    | '/'
    | '.*'
    | './'
    ;

//-----------------------------------------------------------------------------
factor
    : auto_factor: UtFactor
    ;

auto_factor
    : primary { ( '^' | '.^' ) primary }
    ;

//-----------------------------------------------------------------------------
primary
    : auto_primary: UtPrimary
    ;

auto_primary
    : unsigned_integer
    | component_reference
    ;

//-----------------------------------------------------------------------------
component_reference
    : auto_component_reference: UtComponentReference
    ;

auto_component_reference
    : [ '.' ] ident { '.' ident }
    ;

//-----------------------------------------------------------------------------
unsigned_integer
    : auto_unsigned_integer: UtUnsignedInteger
    ;

auto_unsigned_integer
    : /[0-9]+/
    ;

//-----------------------------------------------------------------------------
name: auto_name: UtName
    ;

auto_name
    : ident { '.'^ ident }
    ;
