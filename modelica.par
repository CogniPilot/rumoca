%start stored_definition
%title "Modelica grammar"
%comment "Modelica grammar 3.7-dev for `parol`"
%line_comment "//"
%t_type crate::modelica_grammar::OwnedToken
%nt_type stored_definition = crate::modelica_grammar::StoredDefinition
%nt_type class_definition = crate::modelica_grammar::ClassDefinition
%nt_type class_prefixes = crate::modelica_grammar::ClassPrefixes
%nt_type class_specifier = crate::modelica_grammar::ClassSpecifier
%nt_type long_class_specifier = crate::modelica_grammar::ClassSpecifier
%nt_type composition = crate::modelica_grammar::Composition
%nt_type element_list = crate::modelica_grammar::ElementList
%nt_type element = crate::modelica_grammar::Element
%nt_type component_clause = crate::modelica_grammar::ComponentClause
%nt_type component_list = crate::modelica_grammar::ComponentList
%nt_type component_declaration = crate::modelica_grammar::ComponentDeclaration
%nt_type declaration = crate::modelica_grammar::Declaration
%nt_type type_prefix = crate::modelica_grammar::TypePrefix
%nt_type type_specifier = crate::modelica_grammar::TypeSpecifier
%nt_type equation_section = crate::modelica_grammar::EquationSection
%nt_type ident = crate::modelica_grammar::Ident
%nt_type some_equation = crate::modelica_grammar::Equation
%nt_type simple_expression = crate::modelica_grammar::SimpleExpression
%nt_type logical_expression = crate::modelica_grammar::LogicalExpression
%nt_type logical_term = crate::modelica_grammar::LogicalTerm
%nt_type logical_factor = crate::modelica_grammar::LogicalFactor
%nt_type relation = crate::modelica_grammar::Relation
%nt_type relational_operator = crate::modelica_grammar::RelationalOperator
%nt_type arithmetic_expression = crate::modelica_grammar::ArithmeticExpression
%nt_type add_operator = crate::modelica_grammar::AddOperator
%nt_type term = crate::modelica_grammar::Term
%nt_type mul_operator = crate::modelica_grammar::MulOperator
%nt_type factor = crate::modelica_grammar::Factor
%nt_type primary = crate::modelica_grammar::Primary
%nt_type component_reference = crate::modelica_grammar::ComponentReference
%nt_type unsigned_integer = crate::modelica_grammar::UnsignedInteger
%nt_type name = crate::modelica_grammar::Name

%%
//=============================================================================
// 2.3.3 Modelica Keywords

// algorithm: 'algorithm';
and: 'and';
// annotation: 'annotation';
block: 'block';
// break: 'break';
class: 'class';
// connect: 'connect';
connector: 'connector';
constant: 'constant';
// constrainedby: 'constrainedby';
// der: 'der';
discrete: 'discrete';
// each: 'each';
// else: 'else';
// elseif: 'elseif';
// elsewhen: 'elsewhen';
encapsulated: 'encapsulated';
end: 'end';
// enumeration: 'enumeration';
equation: 'equation';
expandable: 'expandable';
// extends: 'extends';
// external: 'external';
// false: 'false';
final: 'final';
flow: 'flow';
// for: 'for';
function: 'function';
// if: 'if';
// import: 'import';
impure: 'impure';
// in: 'in';
initial: 'initial';
// inner: 'inner';
input: 'input';
// loop: 'loop';
model: 'model';
not: 'not';
operator: 'operator';
or: 'or';
// outer: 'outer';
output: 'output';
package: 'package';
parameter: 'parameter';
// partial: 'partial';
// protected: 'protected';
// public: 'public';
pure: 'pure';
record: 'record';
// redeclare: 'redeclare';
// replaceable: 'replaceable';
// return: 'return';
stream: 'stream';
// then: 'then';
// true: 'true';
type: 'type';
// when: 'when';
// while: 'while';
within: 'within';

//=============================================================================
// A.1 Lexical conventions
// IDENT = NON-DIGIT { DIGIT | NON-DIGIT } | Q-IDENT
ident
    : /[_a-zA-Z][_a-zA-Z0-9]*/
    ;

// Q-IDENT = "'" { Q-CHAR | S-ESCAPE } "'"

// NON-DIGIT = "_" | letters "a"..."z" | letters "A"..."Z"

// DIGIT = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

// Q-CHAR = NON-DIGIT | DIGIT | "!" | "#" | "$" | "%" | "&" | "(" | ")"
//    | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | ">" | "="
//    | "?" | "@" | "[" | "]" | "^" | "{" | "}" | "|" | "~" | " " | """

// S-ESCAPE = "\'" | "\"" | "\?" | "\\"
//    | "\a" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v"

// STRING = """ { S-CHAR | S-ESCAPE } """

// S-CHAR is any member of the Unicode character set
// (https://unicode.org; see section 13.4 for storing as UTF-8 on files)
// except double-quote ‘”’, and backslash ‘\’.


// UNSIGNED-INTEGER = DIGIT { DIGIT }
unsigned_integer
    : /[0-9]+/
    ;
// UNSIGNED-REAL =
//    UNSIGNED-INTEGER  "." [ UNSIGNED-INTEGER ]
//    | UNSIGNED_INTEGER [ "." [ UNSIGNED_INTEGER ] ]
//      ( "e" | "E" ) [ "+" | "-" ] UNSIGNED-INTEGER
//    | "."  UNSIGNED-INTEGER [ ( "e" | "E" ) [ "+" | "-" ] UNSIGNED-INTEGER ]


//=============================================================================
// A.2.1 Stored Definition – Within
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//✅ stored-definition :
//✅    [ within [ name ] ";" ]
//✅    { [ final ] class-definition ";" }
stored_definition :
    [ within [ name ] ';' ]
    { [ final ] class_definition ';' }
    ;

//=============================================================================
// A.2.2 Class Definition
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//✅ class-definition :
//✅    [ encapsulated ] class-prefixes class-specifier
class_definition :
    [ encapsulated ] class_prefixes class_specifier
    ;

//✅ class-prefixes :
//✅    [ partial ]
//✅    ( class
//✅      | model
//✅      | [ operator ] record
//✅      | block
//✅      | [ expandable ] connector
//✅      | type
//✅      | package
//✅      | [ pure | impure ] [ operator ] function
//✅      | operator
//✅    )
class_prefixes :
    [ 'partial' ]
    ( class
        | model
        | [ operator ] record
        | block
        | [ expandable ] connector
        | type
        | package
        | [ pure | impure ] [ operator ] function
        | operator
    )
    ;

//🟨 class-specifier :
//🟨    long-class-specifier
//🟥    | short-class-specifier
//🟥    | der-class-specifier
class_specifier :
    long_class_specifier
    ;

//🟨 long-class-specifier :
//🟨    IDENT description-string composition end IDENT
//🟥    | extends IDENT [ class-modification ] description-string composition end IDENT
long_class_specifier :
    ident@name composition end^ ident
    ;

//🟥 short-class-specifier :
//🟥    IDENT "=" base-prefix type-specifier [ array-subscripts ]
//🟥    [ class-modification ] description
//🟥    | IDENT "=" enumeration "(" ( [ enum-list ] | ":" ) ")" description

//🟥 der-class-specifier :
//🟥    IDENT "=" der "(" type-specifier "," IDENT { "," IDENT } ")" description

//🟥 base-prefix :
//🟥    [ input | output ]

//🟥 enum-list :
//🟥    enumeration-literal { "," enumeration-literal }

//🟥 enumeration-literal :
//🟥    IDENT description

//🟥 composition :
//🟥    element-list
//🟥    { public element-list
//🟥      | protected element-list
//🟥      | equation-section
//🟥      | algorithm-section
//🟥    }
//🟥    [ external [ language-specification ]
//🟥      [ external-function-call ] [ annotation-clause ] ";"
//🟥    ]
//🟥    [ annotation-clause ";" ]
composition :
    element_list { equation_section }
    ;

//🟥 language-specification :
//🟥    STRING

//🟥 external-function-call :
//🟥    [ component-reference "=" ]
//🟥    IDENT "(" [ expression-list ] ")"

element_list :
    { element ';'^ }
    ;

//🟥 element :
//🟥    import-clause
//🟥    | extends-clause
//🟥    | [ redeclare ]
//🟥      [ final ]
//🟥      [ inner ] [ outer ]
//🟥      ( class-definition
//🟥        | component-clause
//🟥        | replaceable ( class-definition | component-clause )
//🟥          [ constraining-clause description ]
//🟥      )
element :
    component_clause
    ;

//🟥 import-clause :
//🟥    import
//🟥    ( IDENT "=" name
//🟥      | name [ ".*" | "." ( "*" | "{" import-list "}" ) ]
//🟥    )
//🟥    description

//🟥 import-list :
//🟥    IDENT { "," IDENT }

//=============================================================================
// A.2.3 Extends
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//🟥 extends-clause :
//🟥    extends type-specifier [ class-or-inheritance-modification ] [ annotation-clause ]

//🟥 constraining-clause :
//🟥    constrainedby type-specifier [ class-modification ]

//🟥 class-or-inheritance-modification :
//🟥    "(" [ argument-or-inheritance-modification-list ] ")"

//🟥 argument-or-inheritance-modification-list :
//🟥     ( argument | inheritance-modification ) { "," ( argument | inheritance-modification ) }

//🟥 inheritance-modification :
//🟥     break ( connect-equation | IDENT )

//-----------------------------------------------------------------------------
// A.2.4 Component Clause
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//🟨 component-clause :
//🟨    type-prefix type-specifier [ array-subscripts ] component-list
component_clause :
    type_prefix type_specifier component_list
    ;

//✅ type-prefix :
//✅    [ flow | stream ]
//✅    [ discrete | parameter | constant ]
//✅    [ input | output ]
type_prefix:
    [ flow | stream ]
    [ discrete | parameter | constant ]
    [ input | output ]
    ;

//✅ component-list :
//✅    component-declaration { "," component-declaration }
component_list :
    component_declaration { ','^ component_declaration }
    ;

//🟨 component-declaration :
//🟨    declaration [ condition-attribute ] description
component_declaration :
    declaration
    ;

//🟥 condition-attribute :
//🟥    if expression

//🟨 declaration :
//🟨    IDENT [ array-subscripts ] [ modification ]
declaration :
    ident
    ;

//=============================================================================
// A.2.5 Modification
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//🟥 modification :
//🟥    class-modification [ "=" modification-expression ]
//🟥    | "=" modification-expression

//🟥 modification-expression :
//🟥    expression
//🟥    | break

//🟥 class-modification :
//🟥    "(" [ argument-list ] ")"

//🟥 argument-list :
//🟥    argument { "," argument }

//🟥 argument :
//🟥    element-modification-or-replaceable
//🟥    | element-redeclaration

//🟥 element-modification-or-replaceable :
//🟥    [ each ] [ final ] ( element-modification | element-replaceable )

//🟥 element-modification :
//🟥    name [ modification ] description-string

//🟥 element-redeclaration :
//🟥    redeclare [ each ] [ final ]
//🟥    ( short-class-definition | component-clause1 | element-replaceable )

//🟥 element-replaceable :
//🟥    replaceable ( short-class-definition | component-clause1 )
//🟥    [ constraining-clause ]

//🟥 component-clause1 :
//🟥    type-prefix type-specifier component-declaration1

//🟥 component-declaration1 :
//🟥    declaration description

//🟥 short-class-definition :
//🟥    class-prefixes short-class-specifier

//=============================================================================
// A.2.6 Equations
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//✅ equation-section :
//✅    [ initial ] equation { some-equation ";" }
equation_section :
    [ initial ] equation^ { some_equation ';'^ }
    ;

//🟥 algorithm-section :
//🟥    [ initial ] algorithm { statement ";" }

//🟨 some-equation :
//🟨    ( simple-expression "=" expression
//🟥      | if-equation
//🟥      | for-equation
//🟥      | connect-equation
//🟥      | when-equation
//🟥      | component-reference function-call-args
//🟥    )
//🟥    description
some_equation
    : simple_expression '='^ simple_expression
    ;

//🟥 statement :
//🟥    ( component-reference ( ":=" expression | function-call-args )
//🟥      | "(" output-expression-list ")" ":="
//🟥        component-reference function-call-args
//🟥      | break
//🟥      | return
//🟥      | if-statement
//🟥      | for-statement
//🟥      | while-statement
//🟥      | when-statement
//🟥    )
//🟥    description

//🟥 if-equation :
//🟥    if expression then
//🟥      { some-equation ";" }
//🟥    { elseif expression then
//🟥      { some-equation ";" }
//🟥    }
//🟥    [ else
//🟥      { some-equation ";" }
//🟥    ]
//🟥    end if

//🟥 if-statement :
//🟥    if expression then
//🟥      { statement ";" }
//🟥    { elseif expression then
//🟥      { statement ";" }
//🟥    }
//🟥    [ else
//🟥      { statement ";" }
//🟥    ]
//🟥    end if

//🟥 for-equation :
//🟥    for for-indices loop
//🟥      { some-equation ";" }
//🟥    end for

//🟥 for-statement :
//🟥    for for-indices loop
//🟥      { statement ";" }
//🟥    end for

//🟥 for-indices :
//🟥    for-index { "," for-index }

//🟥 for-index :
//🟥    IDENT [ in expression ]

//🟥 while-statement :
//🟥    while expression loop
//🟥      { statement ";" }
//🟥    end while

//🟥 when-equation :
//🟥    when expression then
//🟥      { some-equation ";" }
//🟥    { elsewhen expression then
//🟥      { some-equation ";" }
//🟥    }
//🟥    end when

//🟥 when-statement :
//🟥    when expression then
//🟥      { statement ";" }
//🟥    { elsewhen expression then
//🟥      { statement ";" }
//🟥    }
//🟥    end when

//🟥 connect-equation :
//🟥    connect "(" component-reference "," component-reference ")"

//=============================================================================
// A.2.7 Expressions
// ✅: Implemented,  🟥: Not-Implemented, 🟨: Partial

//🟥 expression :
//🟥    simple-expression
//🟥    | if expression then expression
//🟥      { elseif expression then expression }
//🟥      else expression

//✅ simple-expression :
//✅    logical-expression [ ":" logical-expression [ ":" logical-expression ] ]
simple_expression
    : logical_expression [ ':'^ logical_expression [ ':'^ logical_expression ] ]
    ;

//✅ logical-expression :
//✅    logical-term { or logical-term }
logical_expression
    : logical_term { or^ logical_term }
    ;

//✅ logical-term :
//✅    logical-factor { and logical-factor }
logical_term
    : logical_factor { and^ logical_factor }
    ;

//✅ logical-factor :
//✅    [ not ] relation
logical_factor
    : [ not ] relation
    ;

//✅ relation :
//✅    arithmetic-expression [ relational-operator arithmetic-expression ]
relation
    : arithmetic_expression [ relational_operator arithmetic_expression ]
    ;

//✅ relational-operator :
//✅    "<" | "<=" | ">" | ">=" | "==" | "<>"
relational_operator
    : '<'
    | '<='
    | '>'
    | '>='
    | '=='
    | '<>'
    ;

//✅ arithmetic-expression :
//✅    [ add-operator ] term { add-operator term }
arithmetic_expression
    : [ add_operator ] term { add_operator term }
    ;

//✅ add-operator :
//✅    "+" | "-" | ".+" | ".-"
add_operator: 
    '+' | '-' | '.+' | '.-'
    ;

//✅ term :
//✅    factor { mul-operator factor }
term
    : factor { mul_operator factor }
    ;

//✅ mul-operator :
//✅    "*" | "/" | ".*" | "./"
mul_operator:
    '*' | '/' | '.*' | './'
    ;

//✅ factor :
//✅    primary [ ( "^" | ".^" ) primary ]
factor
    : primary { ( '^' | '.^' ) primary }
    ;

//🟨 primary :
//🟨    UNSIGNED-NUMBER
//🟥    | STRING
//🟥    | false
//🟥    | true
//🟥    | ( component-reference | der | initial | pure ) function-call-args
//✅    | component-reference
//🟥    | "(" output-expression-list ")" [ ( array-subscripts | "." IDENT ) ]
//🟥    | "[" expression-list { ";" expression-list } "]"
//🟥    | "{" array-arguments "}"
//🟥    | end
primary
    : unsigned_integer
    | component_reference
    ;

//🟥 UNSIGNED-NUMBER :
//🟥    UNSIGNED-INTEGER | UNSIGNED-REAL

//🟥 type-specifier :
//🟥    ["."] name
type_specifier
    : [ '.' ] name
    ;

//✅ name :
//✅    IDENT { "." IDENT }
name
    : ident { '.'^ ident }
    ;

//🟨 component-reference :
//🟨    [ "." ] IDENT [ array-subscripts ] { "." IDENT [ array-subscripts ] }
component_reference
    : [ '.' ] ident { '.' ident }
    ;

//🟥 result-reference :
//🟥    component-reference
//🟥    | der "(" component-reference [ "," UNSIGNED-INTEGER ] ")"

//🟥 function-call-args :
//🟥    "(" [ function-arguments ] ")"

//🟥 function-arguments :
//🟥    expression [ "," function-arguments-non-first | for for-indices ]
//🟥    | function-partial-application [ "," function-arguments-non-first ]
//🟥    | named-arguments

//🟥 function-arguments-non-first :
//🟥    function-argument [ "," function-arguments-non-first ]
//🟥    | named-arguments

//🟥 array-arguments :
//🟥    expression [ "," array-arguments-non-first | for for-indices ]

//🟥 array-arguments-non-first :
//🟥    expression [ "," array-arguments-non-first ]

//🟥 named-arguments: named-argument [ "," named-arguments ]

//🟥 named-argument: IDENT "=" function-argument

//🟥 function-argument :
//🟥    function-partial-application | expression

//🟥 function-partial-application :
//🟥    function type-specifier "(" [ named-arguments ] ")"

//🟥 output-expression-list :
//🟥    [ expression ] { "," [ expression ] }

//🟥 expression-list :
//🟥    expression { "," expression }

//🟥 array-subscripts :
//🟥    "[" subscript { "," subscript } "]"

//🟥 subscript :
//🟥    ":" | expression

//🟥 description :
//🟥    description-string [ annotation-clause ]

//🟥 description-string :
//🟥    [ STRING { "+" STRING } ]

//🟥 annotation-clause :
//🟥    annotation class-modification
