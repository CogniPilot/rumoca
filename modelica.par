%start stored_definition
%title "Modelica grammar"
%comment "Empty grammar generated by `parol`"
%line_comment "//"
%nt_type stored_definition = crate::modelica_grammar::StoredDefinition
%nt_type class_definition = crate::modelica_grammar::ClassDefinition
%nt_type class_prefixes = crate::modelica_grammar::ClassPrefixes
%nt_type class_type = crate::modelica_grammar::ClassType
%nt_type class_specifier = crate::modelica_grammar::ClassSpecifier
%nt_type composition = crate::modelica_grammar::Composition
%nt_type element_list = crate::modelica_grammar::ElementList
%nt_type element = crate::modelica_grammar::Element
%nt_type component_clause = crate::modelica_grammar::ComponentClause
%nt_type component_list = crate::modelica_grammar::ComponentList
%nt_type component_declaration = crate::modelica_grammar::ComponentDeclaration
%nt_type declaration = crate::modelica_grammar::Declaration
%nt_type type_prefix = crate::modelica_grammar::TypePrefix
%nt_type type_specifier = crate::modelica_grammar::TypeSpecifier
%nt_type equation_section = crate::modelica_grammar::EquationSection
%nt_type ident = crate::modelica_grammar::Ident
%nt_type some_equation = crate::modelica_grammar::SomeEquation
%nt_type simple_expression = crate::modelica_grammar::SimpleExpression
%nt_type logical_expression = crate::modelica_grammar::LogicalExpression
%nt_type logical_term = crate::modelica_grammar::LogicalTerm
%nt_type logical_factor = crate::modelica_grammar::LogicalFactor
%nt_type relation = crate::modelica_grammar::Relation
%nt_type relational_operator = crate::modelica_grammar::RelationalOperator
%nt_type arithmetic_expression = crate::modelica_grammar::ArithmeticExpression
%nt_type add_operator = crate::modelica_grammar::AddOperator
%nt_type term = crate::modelica_grammar::Term
%nt_type mul_operator = crate::modelica_grammar::MulOperator
%nt_type factor = crate::modelica_grammar::Factor
%nt_type primary = crate::modelica_grammar::Primary
%nt_type component_reference = crate::modelica_grammar::ComponentReference
%nt_type unsigned_integer = crate::modelica_grammar::UnsignedInteger
%nt_type name = crate::modelica_grammar::Name

%%
stored_definition
    : [ 'within'^ [ name ] ';'^ ] { class_definition ';'^ }
    ;

class_definition
    : [ 'encapsulated' ] class_prefixes class_specifier
    ;

class_prefixes
    : [ 'partial' ] class_type
    ;

class_type
    : 'class'
    | 'model'
    | [ 'operator' ] 'record'
    | 'block'
    | [ 'expandable' ] 'connector'
    | 'type'
    | 'package'
    | [ 'pure' | 'impure' ] [ 'operator' ] 'function'
    | 'operator'
    ;

class_specifier
    : long_class_specifier
    ;

long_class_specifier
    : ident composition 'end'^ ident
    ;

composition
    : element_list { equation_section }
    ;

element_list
    : { element ';'^ }
    ;

element
    : component_clause
    ;

component_clause
    : type_prefix type_specifier component_list
    ;

component_list
    : component_declaration { ','^ component_declaration }
    ;

component_declaration
    : declaration
    ;

declaration
    : ident
    ;

type_prefix
    : [ 'flow' | 'stream' ] [ 'discrete' | 'parameter' | 'constant' ] [ 'input' | 'output' ]
    ;

type_specifier
    : [ '.' ] name
    ;

equation_section
    : 'equation'^ { some_equation ';'^ }
    ;

ident
    : /[A-Za-z][A-Za-z0-9_]*/
    ;

some_equation
    : simple_expression '='^ simple_expression
    ;

simple_expression
    : logical_expression [ ':'^ logical_expression [ ':'^ logical_expression ] ]
    ;

logical_expression
    : logical_term { 'or'^ logical_term }
    ;

logical_term
    : logical_factor { 'and'^ logical_factor }
    ;

logical_factor
    : [ 'not' ] relation
    ;

relation
    : arithmetic_expression [ relational_operator arithmetic_expression ]
    ;

relational_operator
    : '<'
    | '<='
    | '>'
    | '>='
    | '=='
    | '<>'
    ;

arithmetic_expression
    : [ add_operator ] term { add_operator term }
    ;

add_operator
    : '+'
    | '-'
    | '.+'
    | '.-'
    ;

term
    : factor { mul_operator factor }
    ;

mul_operator
    : '*'
    | '/'
    | '.*'
    | './'
    ;

factor
    : primary { ( '^' | '.^' ) primary }
    ;

primary
    : unsigned_integer
    | component_reference
    ;

component_reference
    : [ '.' ] ident { '.' ident }
    ;

unsigned_integer
    : /[0-9]+/
    ;

name
    : ident { '.'^ ident }
    ;
