{%- macro render_dae(dae) -%}
    {%- set vars_vects = ['u', 'p', 'cp', 'x', 'm', 'y', 'z'] -%}
    {%- set vars_pre_vects = ['pre_x', 'pre_m', 'pre_z'] -%}
import sympy
import numpy as np
import scipy.integrate

cos = sympy.cos
sin = sympy.sin
tan = sympy.tan

class Model:
    """
    Flattened Modelica Model
    """

    def __init__(self):
        # ============================================
        # Initialize
        self.solved = False

        # ============================================
        # Declare time
        self.time = sympy.symbols('time')

        {% for var in vars_vects -%}
        # ============================================
        # Declare {{ var }}
        {% for c in dae[var] -%}
        {{ c.name }} = sympy.symbols('{{ c.name }}')
        {% endfor -%}
        self.{{var }} {{ "= sympy.Matrix([" }}{%- for c in dae[var] %}
            {{ c.name }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
        {% endfor -%} {{ "])" }}
        self.{{ var }}0 = {{ "{" }} {% for c in dae[var] %}
            '{{ c.name }}': {{ render_expression(c.start) }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
        {%- endfor -%}{{ "}" }}
        self.{{ var }}_index = {{ "{" }} {% for c in dae[var] %}
            '{{ c.name }}': {{ loop.index0 }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
        {%- endfor -%}{{ "}" }}
        self.{{ var }}_index_rev = {{ "[" }} {% for c in dae[var] %}
            '{{ c.name }}' {%- if not loop.last -%}{{ ", " }}{%- endif -%}
        {%- endfor -%}{{ "]" }}
        {% endfor %}
        {% for var in vars_pre_vects -%}
        # ============================================
        # Declare {{ var }}
        {% for c in dae[var] -%}
        {{ c.name }} = sympy.symbols('{{ c.name }}')
        {% endfor -%}
        self.{{var }} {{ "= sympy.Matrix([" }}{%- for c in dae[var] %}
            {{ c.name }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
        {% endfor -%} {{ "])" }}

        {% endfor -%}
        # ============================================
        # Declare x_dot
        {% for c in dae.x_dot -%}
        {{ c.name }} = sympy.symbols('{{ c.name }}')
        {% endfor -%}
        self.x_dot {{ "= sympy.Matrix([" }}{%- for c in dae.x_dot %}
            {{ c.name }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
        {% endfor -%} {{ "])" }}

        # ============================================
        # Define Continous Update Function: fx
        self.fx = sympy.Matrix([{% for eq in dae.fx %}
            {{ render_equation(eq) }} {%- if not loop.last -%}{{ ", " }}{%- endif %}
        {%- endfor %}])

        # ============================================
        # Define Conditions: c
        self.c = {{ "{" }} {% for key, val in dae.c | items %}
            '{{ key }}': {{ render_expression(val) }} {%- if not loop.last -%}{{ ", " }}{%- endif %}
        {%- endfor %} {{ "}" }}

        # ============================================
        # Define Reset Functions: fr
        {%- for key, val in dae.fr | items %}
        def __fr_{{ key }}(x):
            {% for c in dae.x -%}
            pre_{{ c.name }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
            {% endfor -%}  = self.x
            {% for c in dae.x -%}
            {{ c.name }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
            {% endfor -%}  = self.x
            {{ render_statement(val) }}
            return [{%- for c in dae.x %}
            {{ c.name }} {%- if not loop.last -%}{{ ", " }}{%- endif -%}
            {% endfor -%}]
        self.fr_{{ key }} = sympy.lambdify([self.x, self.p], __fr_{{ key }}(self.x))
        {%- endfor %}

        # ============================================
        # Events and Event callbacks
        {%- for key, val in dae.c | items %}
        self.zc_{{key}} = sympy.lambdify([self.time, self.x], {{ render_zero_crossing(val) }})
        self.zc_{{key}}.terminal = True
        {%- endfor %}


    def solve(self):
        # ============================================
        # Solve for explicit ODE
        v = sympy.Matrix(list(self.x_dot) + list(self.y))
        sol = sympy.solve(self.fx, v)
        self.sol_x_dot = self.x_dot.subs(sol)
        self.sol_y = self.y.subs(sol)
        self.f_x_dot = sympy.lambdify([self.time, self.x, self.m, self.u, self.p], list(self.sol_x_dot))
        self.f_y = sympy.lambdify([self.time, self.x, self.m, self.u, self.p], list(self.sol_y))
        self.solved = True

    def __repr__(self):
        return repr(self.__dict__)

    def simulate(self, t0, tf, dt, x0=None, f_u=None, max_events=100):
        """
        Simulate the modelica model
        """
        if not self.solved:
            self.solve()
        
        if f_u is None:
            def f_u(t):
                return np.zeros(self.u.shape[0])

        # ============================================
        # Declare initial vectors
        {% for var in ['u', 'p', 'cp', 'm', 'y', 'z'] -%}
        {{ var }}0 = np.array([self.{{ var }}0[k] for k in self.{{ var }}0.keys()])
        {% endfor %}
        if x0 is None:
            x0 = np.array([self.x0[k] for k in self.x0.keys()])

        # ============================================
        # Declare Events
        events = [{% for key, val in dae.c | items %}
            self.zc_{{key}} {%- if not loop.last -%}{{ ", " }}{%- endif %}
        {% endfor %}]

        event_callback = {{ "{" }}{% for key, val in dae.fr | items %}
            {{ loop.index0 }}: lambda t, x: self.fr_{{ key }}(x, p0),
        {% endfor %} {{- "}" }}

        # ============================================
        # Solve IVP
        event_count = 0
        t1 = tf
        data = {
            't': [],
            'x': [],
            'u': [],
            'y': [],
        }

        while t0 < tf - dt and event_count < max_events:
            t_eval = np.arange(t0, tf, dt)
            res = scipy.integrate.solve_ivp(
                y0=x0,
                fun=lambda ti, x: self.f_x_dot(ti, x, m0, f_u(ti), p0),
                t_span=[t_eval[0], t_eval[-1]],
                t_eval=t_eval,
                events=events,
            )

            # check for event
            x1 = res['y'][:, -1]
            t1 = res['t'][-1]
            if res.t_events is not None:
                event_count += 1
                for i, t_event in enumerate(res.t_events):
                    if len(t_event) > 0:
                        if i in event_callback:
                            x1 = event_callback[i](t_event[i], x1)

            x = res['y']
            t = res['t']
            u = np.array([ f_u(ti) for ti in t ]).T
            y = np.array([ self.f_y(ti, xi, m0, ui, p0) for (ti, xi, ui) in zip(t, x.T, u.T) ]).T

            data['x'].append(x)
            data['t'].append(t)
            data['u'].append(u)
            data['y'].append(y)

            t0 = t1
            x0 = x1
        
        for k in data.keys():
            if len(data[k]) > 0:
                data[k] = np.hstack(data[k])
        return data
{%- endmacro -%}

{%- macro render_expression(expr) -%}
    {%- if "Terminal" in expr -%}
        {{- expr.Terminal.token.text -}}
    {%- elif "FunctionCall" in expr -%}
        {{- render_function(expr.FunctionCall) -}}
    {%- elif "ComponentReference" in expr -%}
        {{- render_component_reference(expr.ComponentReference) -}}
    {%- elif "Binary" in expr -%}
        {{- render_binary(expr.Binary) -}}
    {%- elif "Unary" in expr -%}
        {{- render_unary(expr.Unary) -}}
    {%- else -%}
        UNHANDLED EXPRESSION: {{ expr | pprint }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_zero_crossing(expr) -%}
    {%- if "Binary" in expr -%}
        {%- if "Lt" in expr.Binary.op -%}
            {{- render_expression(expr.Binary.lhs) -}}
            {{- " - " -}}
            {{- render_expression(expr.Binary.rhs) -}}
        {%- elif "Gt" in expr.Binary.op -%}
            {{- render_expression(expr.Binary.lhs) -}}
            {{- " - " -}}
            {{- render_expression(expr.Binary.rhs) -}}
        {%- else -%}
            UNHANDLED ZERO CROSSING OP: {{ expr.Binary.op | pprint }}
        {%- endif -%}
    {%- else -%}
        UNHANDLED ZERO CROSSING EXPRESSION: {{ expr | pprint }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_equation(eq) -%}
    {%- if "Simple" in eq -%}
        {{- render_expression(eq.Simple.lhs) -}} {{- " - (" -}}
        {{- render_expression(eq.Simple.rhs) -}} {{- ")" -}}
    {%- elif "If" in eq -%}
        {{ eq | pprint }}
    {%- else -%}
        UNHANDLED EQUATION: {{ eq | pprint }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_statement(stmt) -%}
    {%- if "Assignment" in stmt -%}
        {{- render_component_reference(stmt.Assignment.comp) -}} {{- " = " -}}
        {{- render_expression(stmt.Assignment.value) -}}
    {%- else -%}
        UNHANDLED RESET STATEMENT: {{ stmt | pprint }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_terminal(term) -%}
    {% if term.terimanal_type == "UnsignedInteger" %}
    {{ term.token.text | float }}
    {% elif term.terimanal_type == "UnsignedReal" %}
    {{ term.token.text | float }}
    {%- else -%}
        UNHANDLED TERM: {{ term | pprint }}
    {% endif %}
{%- endmacro -%}

{%- macro render_binary(expr) -%}
    {{ "(" }} {{- render_expression(expr.lhs) -}} {{- " " -}}
    {%- if "Add" in expr.op -%}
        {{ "+" }}
    {%- elif "Sub" in expr.op -%}
        {{ "-" }}
    {%- elif "Mul" in expr.op -%}
        {{ "*" }}
    {%- elif "Div" in expr.op -%}
        {{ "/" }}
    {%- elif "Lt" in expr.op -%}
        {{ "<" }}
    {%- elif "Gt" in expr.op -%}
        {{ ">" }}
    {%- else -%}
        UNHANDLED OP: {{ expr.op | pprint }}
    {%- endif -%}
    {{- " " -}} {{- render_expression(expr.rhs) -}} {{ ")" }}
{%- endmacro -%}


{%- macro render_unary(expr) -%}
    {%- if "Minus" in expr.op -%}
        {{ "-" }}
    {%- else -%}
        UNHANDLED OP: {{ expr.op | pprint }}
    {%- endif -%}
    {{ "(" }} {{- render_expression(expr.rhs) -}} {{ ")" }}
{%- endmacro -%}

{%- macro render_component_reference(comp) -%}
    {%- for part in comp.parts -%}
        {{ part.ident.text }}{% if not loop.last %}.{% endif %}
    {%- endfor -%}
{%- endmacro -%}

{%- macro render_function(func) -%}
    {{ render_component_reference(func.comp) }} {{- "(" -}}{%- for arg in func.args -%}
        {{- render_expression(arg) -}} {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%}{{ ")" }}
{%- endmacro -%}
"""
Automatically generated by Rumoca
"""
{{ render_dae(dae) }}