{%- macro render_class(class) -%}
class {{ class.name.text }}(BaseModel):

    def __init__(self):

        # define the symbolic variables
        {%- for cname, comp in class.components | items %}
        {{ comp.name }} = ca.SX.sym('{{ comp.name }}')
        {%- endfor %}

        # define the state vector
        self.x = ca.vertcat(
            {%- for cname, comp in class.components | items %}
            {{ comp.name }} {%- if not loop.last %}, {% endif %}
            {%- endfor %}
        )

        {% for eq in class.equations -%}
            {% if "Simple" in eq -%}
                {% if "FunctionCall" in eq.Simple.lhs -%}
                    {% set fcall = eq.Simple.lhs.FunctionCall -%}
                    {% if fcall.comp.parts[0].ident.text == "der" -%}
        der_{{ fcall.args[0].ComponentReference.parts[0].ident.text }} = {{ render_expression(eq.Simple.rhs) }};
                    {%- endif -%}
                {% endif -%}
            {% endif -%}
        {%- endfor %}

        self.ode = ca.vertcat(
            {%- for cname, comp in class.components | items %}
            der_{{ comp.name }} {%- if not loop.last %}, {% endif %}
            {%- endfor %}
        )
        self.z = ca.vertcat()
        self.u = ca.vertcat()
        self.y = ca.vertcat()
        self.p = ca.vertcat()
        self.alg = ca.vertcat()

        self.p0 = {}
        self.z0 = {}
        self.x0 = {}

{%- endmacro -%}

{%- macro render_expression(expr) -%}
    {% if "Terminal" in expr %}
        {{- expr.Terminal.token.text -}}
    {% else %}
    {{ expr }}
    {% endif %}
{%- endmacro -%}

{%- macro render_terminal(term) -%}
    {% if term.terimanal_type == "UnsignedInteger" %}
    {{ term.token.text }}
    {% endif %}
{%- endmacro -%}

import casadi as ca
import numpy as np


class BaseModel:

    def __init__(self):
        pass

    def __repr__(self):
        return repr(self.__dict__)

    def simulate(self, t=None, u=None):
        if t is None:
            t = np.arange(0, 1, 0.01)
        if u is None:
            u = 0

        p0 = np.array([self.p0[k] for k in self.p0.keys()])
        z0 = np.array([self.z0[k] for k in self.z0.keys()])
        x0 = np.array([self.x0[k] for k in self.x0.keys()])

        F = ca.integrator(
            'F', 'idas',
            {'x': self.x, 'z': self.z, 'p': self.p, 'u': self.u, 'ode': self.ode, 'alg': self.alg},
            t[0], t)

        res = F(x0=x0, z0=z0, p=p0, u=u)
        return {
            't': t,
            'x': res['xf'].T
        }
    
    def linearize(self):
        A = ca.jacobian(self.ode, self.x)
        B = ca.jacobian(self.ode, self.u)
        C = ca.jacobian(self.y, self.x)
        D = ca.jacobian(self.y, self.u)
        return (A, B, C, D)


def cat(axis, *args):
    return ca.vertcat(*args)
    
{%- for name, class in def.class_list | items %}


{{ render_class(class) }}
{%- endfor %}