"""
Generated by Rumoca
    rumoca pkg version : 0.5.0 - a3d2f60-modified
    model hash : de72bd643980a7d3da9283f1e6d9e91f 
    template hash : f5f8be23bae1b4c1ae7d8c5790fcbbc8
"""

import sympy
from sympy import Matrix, ImmutableDenseMatrix, Piecewise, Tuple
import numpy as np
import scipy.integrate

cos = sympy.cos
sin = sympy.sin
tan = sympy.tan
sqrt = sympy.sqrt


def flatten_piecewise_with_nested_matrices(matrix):
    assert isinstance(matrix, (Matrix, ImmutableDenseMatrix, Tuple)), "Input must be a Matrix object or Tuple"
    piecewise = sympy.piecewise_fold(sympy.Piecewise((matrix, True)))

    if isinstance(piecewise, (Matrix, ImmutableDenseMatrix, Tuple)):
        return piecewise

    def flatten_matrix(matrix):
        """Recursively flatten nested matrices."""
        if isinstance(matrix, (Matrix, ImmutableDenseMatrix, Tuple)):
            flattened = []
            for elem in matrix:
                if isinstance(elem, (Matrix, ImmutableDenseMatrix, Tuple)):
                    flattened.extend(flatten_matrix(elem))
                else:
                    flattened.append(elem)
            return Matrix(flattened)
        return matrix

    flattened_conditions = []
    for expr, cond in piecewise.args:
        flattened_expr = flatten_matrix(expr) if isinstance(expr, (Matrix, ImmutableDenseMatrix, Tuple)) else expr
        flattened_conditions.append((flattened_expr, cond))
    return sympy.piecewise_exclusive(Piecewise(*flattened_conditions))


class Model:
    """
    Flattened Modelica Model
    """

    def __init__(self):
        # ============================================
        # Initialize
        self.solved = False

        # ============================================
        # Declare time
        time = sympy.symbols('time')
        self.time = time

        
        # ============================================
        # Declare u
        str = sympy.symbols('str')
        thr = sympy.symbols('thr')
        self.u = sympy.Matrix([
            str,
            thr])
        self.u0 = { 
            'str': 0.0,
            'thr': 0.0}
        self.u_index = { 
            'str': 0,
            'thr': 1}
        self.u_index_rev = [ 
            'str',
            'thr']
        
        # ============================================
        # Declare p
        h = sympy.symbols('h')
        ixx = sympy.symbols('ixx')
        iyy = sympy.symbols('iyy')
        izz = sympy.symbols('izz')
        l = sympy.symbols('l')
        m = sympy.symbols('m')
        m1_tau = sympy.symbols('m1_tau')
        mag_decl = sympy.symbols('mag_decl')
        r = sympy.symbols('r')
        theta0 = sympy.symbols('theta0')
        w = sympy.symbols('w')
        wheel_base = sympy.symbols('wheel_base')
        wheel_front_pos_x = sympy.symbols('wheel_front_pos_x')
        wheel_ixx = sympy.symbols('wheel_ixx')
        wheel_iyy = sympy.symbols('wheel_iyy')
        wheel_izz = sympy.symbols('wheel_izz')
        wheel_left_pos_y = sympy.symbols('wheel_left_pos_y')
        wheel_m = sympy.symbols('wheel_m')
        wheel_max_turn_angle = sympy.symbols('wheel_max_turn_angle')
        wheel_pos_z = sympy.symbols('wheel_pos_z')
        wheel_radius = sympy.symbols('wheel_radius')
        wheel_rear_pos_x = sympy.symbols('wheel_rear_pos_x')
        wheel_right_pos_y = sympy.symbols('wheel_right_pos_y')
        wheel_separation = sympy.symbols('wheel_separation')
        wheel_width = sympy.symbols('wheel_width')
        x0 = sympy.symbols('x0')
        y0 = sympy.symbols('y0')
        z0 = sympy.symbols('z0')
        self.p = sympy.Matrix([
            h,
            ixx,
            iyy,
            izz,
            l,
            m,
            m1_tau,
            mag_decl,
            r,
            theta0,
            w,
            wheel_base,
            wheel_front_pos_x,
            wheel_ixx,
            wheel_iyy,
            wheel_izz,
            wheel_left_pos_y,
            wheel_m,
            wheel_max_turn_angle,
            wheel_pos_z,
            wheel_radius,
            wheel_rear_pos_x,
            wheel_right_pos_y,
            wheel_separation,
            wheel_width,
            x0,
            y0,
            z0])
        self.p0 = { 
            'h': 0.1,
            'ixx': 1.0,
            'iyy': 1.0,
            'izz': 1.0,
            'l': 0.7,
            'm': 1.0,
            'm1_tau': 1.0,
            'mag_decl': 0.0,
            'r': 0.1,
            'theta0': 0.0,
            'w': 0.3,
            'wheel_base': 0.5,
            'wheel_front_pos_x': 0.25,
            'wheel_ixx': 0.1,
            'wheel_iyy': 0.1,
            'wheel_izz': 0.1,
            'wheel_left_pos_y': 0.175,
            'wheel_m': 0.1,
            'wheel_max_turn_angle': 0.7854,
            'wheel_pos_z': 0.05,
            'wheel_radius': 0.1,
            'wheel_rear_pos_x': 0.25,
            'wheel_right_pos_y': 0.175,
            'wheel_separation': 0.5,
            'wheel_width': 0.05,
            'x0': 0.0,
            'y0': 0.0,
            'z0': 0.25}
        self.p_index = { 
            'h': 0,
            'ixx': 1,
            'iyy': 2,
            'izz': 3,
            'l': 4,
            'm': 5,
            'm1_tau': 6,
            'mag_decl': 7,
            'r': 8,
            'theta0': 9,
            'w': 10,
            'wheel_base': 11,
            'wheel_front_pos_x': 12,
            'wheel_ixx': 13,
            'wheel_iyy': 14,
            'wheel_izz': 15,
            'wheel_left_pos_y': 16,
            'wheel_m': 17,
            'wheel_max_turn_angle': 18,
            'wheel_pos_z': 19,
            'wheel_radius': 20,
            'wheel_rear_pos_x': 21,
            'wheel_right_pos_y': 22,
            'wheel_separation': 23,
            'wheel_width': 24,
            'x0': 25,
            'y0': 26,
            'z0': 27}
        self.p_index_rev = [ 
            'h',
            'ixx',
            'iyy',
            'izz',
            'l',
            'm',
            'm1_tau',
            'mag_decl',
            'r',
            'theta0',
            'w',
            'wheel_base',
            'wheel_front_pos_x',
            'wheel_ixx',
            'wheel_iyy',
            'wheel_izz',
            'wheel_left_pos_y',
            'wheel_m',
            'wheel_max_turn_angle',
            'wheel_pos_z',
            'wheel_radius',
            'wheel_rear_pos_x',
            'wheel_right_pos_y',
            'wheel_separation',
            'wheel_width',
            'x0',
            'y0',
            'z0']
        
        # ============================================
        # Declare c
        self.c = sympy.Matrix([])
        self.c0 = { }
        self.c_index = { }
        self.c_index_rev = [ ]
        
        # ============================================
        # Declare cp
        self.cp = sympy.Matrix([])
        self.cp0 = { }
        self.cp_index = { }
        self.cp_index_rev = [ ]
        
        # ============================================
        # Declare x
        m1_omega = sympy.symbols('m1_omega')
        theta = sympy.symbols('theta')
        x = sympy.symbols('x')
        y = sympy.symbols('y')
        z = sympy.symbols('z')
        self.x = sympy.Matrix([
            m1_omega,
            theta,
            x,
            y,
            z])
        self.x0 = { 
            'm1_omega': 0.0,
            'theta': 0.0,
            'x': 0.0,
            'y': 0.0,
            'z': 0.0}
        self.x_index = { 
            'm1_omega': 0,
            'theta': 1,
            'x': 2,
            'y': 3,
            'z': 4}
        self.x_index_rev = [ 
            'm1_omega',
            'theta',
            'x',
            'y',
            'z']
        
        # ============================================
        # Declare m
        self.m = sympy.Matrix([])
        self.m0 = { }
        self.m_index = { }
        self.m_index_rev = [ ]
        
        # ============================================
        # Declare y
        m1_omega_ref = sympy.symbols('m1_omega_ref')
        v = sympy.symbols('v')
        self.y = sympy.Matrix([
            m1_omega_ref,
            v])
        self.y0 = { 
            'm1_omega_ref': 0.0,
            'v': 0.0}
        self.y_index = { 
            'm1_omega_ref': 0,
            'v': 1}
        self.y_index_rev = [ 
            'm1_omega_ref',
            'v']
        
        # ============================================
        # Declare z
        self.z = sympy.Matrix([])
        self.z0 = { }
        self.z_index = { }
        self.z_index_rev = [ ]
        

        # ============================================
        # Declare pre_x
        pre_m1_omega = sympy.symbols('pre_m1_omega')
        pre_theta = sympy.symbols('pre_theta')
        pre_x = sympy.symbols('pre_x')
        pre_y = sympy.symbols('pre_y')
        pre_z = sympy.symbols('pre_z')
        self.pre_x = sympy.Matrix([
            pre_m1_omega,
            pre_theta,
            pre_x,
            pre_y,
            pre_z])

        # ============================================
        # Declare pre_m
        self.pre_m = sympy.Matrix([])

        # ============================================
        # Declare pre_z
        self.pre_z = sympy.Matrix([])

        # ============================================
        # Declare x_dot
        der_m1_omega = sympy.symbols('der_m1_omega')
        der_theta = sympy.symbols('der_theta')
        der_x = sympy.symbols('der_x')
        der_y = sympy.symbols('der_y')
        der_z = sympy.symbols('der_z')
        self.x_dot = sympy.Matrix([
            der_m1_omega,
            der_theta,
            der_x,
            der_y,
            der_z])

        # ============================================
        # Define Continous Update Function: fx
        self.fx = sympy.Matrix([
            v - ((r * m1_omega)),
            der_x - ((v * cos(theta))),
            der_y - ((v * sin(theta))),
            der_z - (0.0),
            der_theta - (((v / wheel_base) * tan(str))),
            m1_omega_ref - (thr),
            der_m1_omega - (((1.0 / m1_tau) * (m1_omega_ref - m1_omega)))])
        self.fx = flatten_piecewise_with_nested_matrices(self.fx)

        # ============================================
        # Define Reset Functions: fr

        # ============================================
        # Define Condition Update Function: fc
        self.fc = sympy.Tuple(*[])
        self.f_c = sympy.lambdify(
            args=[self.time, self.x],
            expr=self.fc,
            modules=['numpy'])

        # ============================================
        # Events and Event callbacks

    def solve(self):
        # ============================================
        # Solve for explicit ODE
        v = sympy.Matrix(list(self.x_dot) + list(self.y))

        if isinstance(self.fx, sympy.Piecewise):
            sol_x_dot = []
            sol_y = []
            for arg in self.fx.args:
                condition = arg[1]
                sol_i = sympy.solve(arg[0], v)
                x_dot_i = sympy.Tuple(* [xi for xi in self.x_dot.subs(sol_i)])
                sol_x_dot.append((x_dot_i, condition))
                y_i = sympy.Tuple(* [yi for yi in self.y.subs(sol_i)])
                sol_y.append((y_i, condition))
            self.sol_x_dot = sympy.Piecewise(*sol_x_dot)
            self.sol_y = sympy.Piecewise(*sol_y)
        else:
            sol = sympy.solve(self.fx, v)
            self.sol_x_dot = sympy.Tuple(* [xi for xi in self.x_dot.subs(sol)])
            self.sol_y = sympy.Tuple(* [yi for yi in self.y.subs(sol)])
        
        self.f_x_dot = sympy.lambdify(
            args=[self.time, self.x, self.m, self.u, self.p, self.c],
            expr=self.sol_x_dot,
            modules=['numpy'])

        self.f_y = sympy.lambdify(
            args=[self.time, self.x, self.m, self.u, self.p, self.c],
            expr=self.sol_y,
            modules=['numpy'])

        self.solved = True

    def __repr__(self):
        return repr(self.__dict__)

    def simulate(self, t0, tf, dt, x0=None, f_u=None, max_events=100):
        """
        Simulate the modelica model
        """
        if not self.solved:
            self.solve()
        
        if f_u is None:
            def f_u(t):
                return np.zeros(self.u.shape[0])

        # ============================================
        # Declare initial vectors
        u0 = np.array([self.u0[k] for k in self.u0.keys()])
        p0 = np.array([self.p0[k] for k in self.p0.keys()])
        cp0 = np.array([self.cp0[k] for k in self.cp0.keys()])
        c0 = np.array([self.c0[k] for k in self.c0.keys()])
        m0 = np.array([self.m0[k] for k in self.m0.keys()])
        y0 = np.array([self.y0[k] for k in self.y0.keys()])
        z0 = np.array([self.z0[k] for k in self.z0.keys()])
        
        if x0 is None:
            x0 = np.array([self.x0[k] for k in self.x0.keys()])

        # ============================================
        # Declare Events
        events = []

        event_callback = {}

        # ============================================
        # Solve IVP
        event_count = 0
        t1 = tf
        data = {
            't': [],
            'x': [],
            'u': [],
            'y': [],
            'c': [],
        }

        while t0 < tf - dt:
            # check for max events
            if event_count > max_events:
                raise RuntimeError("Max events reached")
            
            # update conditions
            c0 = self.f_c(t0, x0)

            # solve ivp
            t_eval = np.arange(t0, tf, dt)
            res = scipy.integrate.solve_ivp(
                y0=x0,
                fun=lambda ti, x: self.f_x_dot(ti, x, m0, f_u(ti), p0, c0),
                t_span=[t_eval[0], t_eval[-1]],
                t_eval=t_eval,
                events=events,
            )

            # check for event
            x1 = res['y'][:, -1]
            t1 = res['t'][-1]
            if res.t_events is not None:
                event_count += 1
                for i, t_event in enumerate(res.t_events):
                    if len(t_event) > 0:
                        if i in event_callback:
                            x1 = event_callback[i](t_event[i], x1)

            # store data
            x = res['y']
            t = res['t']
            u = np.array([ f_u(ti) for ti in t ]).T
            y = np.array([ self.f_y(ti, xi, m0, ui, p0, c0) for (ti, xi, ui) in zip(t, x.T, u.T) ]).T
            data['x'].append(x)
            data['t'].append(t)
            data['u'].append(u)
            data['y'].append(y)
            data['c'].append(c0)

            # update for next step
            t0 = t1
            x0 = x1
        
        # convert lists to numpy array
        for k in data.keys():
            if len(data[k]) > 0:
                data[k] = np.hstack(data[k])
                
        return data
