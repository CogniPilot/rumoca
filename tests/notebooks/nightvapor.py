"""
Generated by Rumoca
    rumoca pkg version : 0.5.0 - e83e5d3-modified
    model hash : 6ed1eb38c1d50af5a2014a3aa4c7d003 
    template hash : f2a8bd28af15362f4d80e8b92440e5e7
"""

import sympy
from sympy import Matrix, ImmutableDenseMatrix, Piecewise, Tuple
import numpy as np
import scipy.integrate

cos = sympy.cos
sin = sympy.sin
tan = sympy.tan
sqrt = sympy.sqrt


def flatten_piecewise_with_nested_matrices(matrix):
    assert isinstance(matrix, (Matrix, ImmutableDenseMatrix, Tuple)), "Input must be a Matrix object or Tuple"
    piecewise = sympy.piecewise_fold(sympy.Piecewise((matrix, True)))

    if isinstance(piecewise, (Matrix, ImmutableDenseMatrix, Tuple)):
        return piecewise

    def flatten_matrix(matrix):
        """Recursively flatten nested matrices."""
        if isinstance(matrix, (Matrix, ImmutableDenseMatrix, Tuple)):
            flattened = []
            for elem in matrix:
                if isinstance(elem, (Matrix, ImmutableDenseMatrix, Tuple)):
                    flattened.extend(flatten_matrix(elem))
                else:
                    flattened.append(elem)
            return Matrix(flattened)
        return matrix

    flattened_conditions = []
    for expr, cond in piecewise.args:
        flattened_expr = flatten_matrix(expr) if isinstance(expr, (Matrix, ImmutableDenseMatrix, Tuple)) else expr
        flattened_conditions.append((flattened_expr, cond))
    return sympy.piecewise_exclusive(Piecewise(*flattened_conditions))


class Model:
    """
    Flattened Modelica Model
    """

    def __init__(self):
        # ============================================
        # Initialize
        self.solved = False

        # ============================================
        # Declare time
        time = sympy.symbols('time')
        self.time = time

        
        # ============================================
        # Declare u
        a = sympy.symbols('a')
        e = sympy.symbols('e')
        r = sympy.symbols('r')
        t = sympy.symbols('t')
        self.u = sympy.Matrix([
            a,
            e,
            r,
            t])
        self.u0 = { 
            'a': 0.0,
            'e': 0.0,
            'r': 0.0,
            't': 0.0}
        self.u_index = { 
            'a': 0,
            'e': 1,
            'r': 2,
            't': 3}
        self.u_index_rev = [ 
            'a',
            'e',
            'r',
            't']
        
        # ============================================
        # Declare p
        CD0 = sympy.symbols('CD0')
        CL0 = sympy.symbols('CL0')
        CLa = sympy.symbols('CLa')
        J_x = sympy.symbols('J_x')
        J_xz = sympy.symbols('J_xz')
        J_y = sympy.symbols('J_y')
        J_z = sympy.symbols('J_z')
        Lambda = sympy.symbols('Lambda')
        S = sympy.symbols('S')
        g = sympy.symbols('g')
        k = sympy.symbols('k')
        m = sympy.symbols('m')
        rho = sympy.symbols('rho')
        self.p = sympy.Matrix([
            CD0,
            CL0,
            CLa,
            J_x,
            J_xz,
            J_y,
            J_z,
            Lambda,
            S,
            g,
            k,
            m,
            rho])
        self.p0 = { 
            'CD0': 0.02,
            'CL0': 0.1,
            'CLa': 3.14,
            'J_x': 1.0,
            'J_xz': 0.0,
            'J_y': 1.0,
            'J_z': 1.0,
            'Lambda': 1.0,
            'S': 0.5,
            'g': 9.81,
            'k': 0.02,
            'm': 1.0,
            'rho': 1.225}
        self.p_index = { 
            'CD0': 0,
            'CL0': 1,
            'CLa': 2,
            'J_x': 3,
            'J_xz': 4,
            'J_y': 5,
            'J_z': 6,
            'Lambda': 7,
            'S': 8,
            'g': 9,
            'k': 10,
            'm': 11,
            'rho': 12}
        self.p_index_rev = [ 
            'CD0',
            'CL0',
            'CLa',
            'J_x',
            'J_xz',
            'J_y',
            'J_z',
            'Lambda',
            'S',
            'g',
            'k',
            'm',
            'rho']
        
        # ============================================
        # Declare c
        self.c = sympy.Matrix([])
        self.c0 = { }
        self.c_index = { }
        self.c_index_rev = [ ]
        
        # ============================================
        # Declare cp
        self.cp = sympy.Matrix([])
        self.cp0 = { }
        self.cp_index = { }
        self.cp_index_rev = [ ]
        
        # ============================================
        # Declare x
        P = sympy.symbols('P')
        Q = sympy.symbols('Q')
        R = sympy.symbols('R')
        U = sympy.symbols('U')
        V = sympy.symbols('V')
        W = sympy.symbols('W')
        h = sympy.symbols('h')
        phi = sympy.symbols('phi')
        psi = sympy.symbols('psi')
        theta = sympy.symbols('theta')
        x = sympy.symbols('x')
        y = sympy.symbols('y')
        self.x = sympy.Matrix([
            P,
            Q,
            R,
            U,
            V,
            W,
            h,
            phi,
            psi,
            theta,
            x,
            y])
        self.x0 = { 
            'P': 0.0,
            'Q': 0.0,
            'R': 0.0,
            'U': 0.0,
            'V': 0.0,
            'W': 0.0,
            'h': 0.0,
            'phi': 0.0,
            'psi': 0.0,
            'theta': 0.0,
            'x': 0.0,
            'y': 0.0}
        self.x_index = { 
            'P': 0,
            'Q': 1,
            'R': 2,
            'U': 3,
            'V': 4,
            'W': 5,
            'h': 6,
            'phi': 7,
            'psi': 8,
            'theta': 9,
            'x': 10,
            'y': 11}
        self.x_index_rev = [ 
            'P',
            'Q',
            'R',
            'U',
            'V',
            'W',
            'h',
            'phi',
            'psi',
            'theta',
            'x',
            'y']
        
        # ============================================
        # Declare m
        self.m = sympy.Matrix([])
        self.m0 = { }
        self.m_index = { }
        self.m_index_rev = [ ]
        
        # ============================================
        # Declare y
        CD = sympy.symbols('CD')
        CL = sympy.symbols('CL')
        F_x = sympy.symbols('F_x')
        F_y = sympy.symbols('F_y')
        F_z = sympy.symbols('F_z')
        L = sympy.symbols('L')
        M_x = sympy.symbols('M_x')
        M_y = sympy.symbols('M_y')
        M_z = sympy.symbols('M_z')
        aoa = sympy.symbols('aoa')
        q = sympy.symbols('q')
        self.y = sympy.Matrix([
            CD,
            CL,
            F_x,
            F_y,
            F_z,
            L,
            M_x,
            M_y,
            M_z,
            aoa,
            q])
        self.y0 = { 
            'CD': 0.0,
            'CL': 0.0,
            'F_x': 0.0,
            'F_y': 0.0,
            'F_z': 0.0,
            'L': 0.0,
            'M_x': 0.0,
            'M_y': 0.0,
            'M_z': 0.0,
            'aoa': 0.0,
            'q': 0.0}
        self.y_index = { 
            'CD': 0,
            'CL': 1,
            'F_x': 2,
            'F_y': 3,
            'F_z': 4,
            'L': 5,
            'M_x': 6,
            'M_y': 7,
            'M_z': 8,
            'aoa': 9,
            'q': 10}
        self.y_index_rev = [ 
            'CD',
            'CL',
            'F_x',
            'F_y',
            'F_z',
            'L',
            'M_x',
            'M_y',
            'M_z',
            'aoa',
            'q']
        
        # ============================================
        # Declare z
        self.z = sympy.Matrix([])
        self.z0 = { }
        self.z_index = { }
        self.z_index_rev = [ ]
        

        # ============================================
        # Declare pre_x
        pre_P = sympy.symbols('pre_P')
        pre_Q = sympy.symbols('pre_Q')
        pre_R = sympy.symbols('pre_R')
        pre_U = sympy.symbols('pre_U')
        pre_V = sympy.symbols('pre_V')
        pre_W = sympy.symbols('pre_W')
        pre_h = sympy.symbols('pre_h')
        pre_phi = sympy.symbols('pre_phi')
        pre_psi = sympy.symbols('pre_psi')
        pre_theta = sympy.symbols('pre_theta')
        pre_x = sympy.symbols('pre_x')
        pre_y = sympy.symbols('pre_y')
        self.pre_x = sympy.Matrix([
            pre_P,
            pre_Q,
            pre_R,
            pre_U,
            pre_V,
            pre_W,
            pre_h,
            pre_phi,
            pre_psi,
            pre_theta,
            pre_x,
            pre_y])

        # ============================================
        # Declare pre_m
        self.pre_m = sympy.Matrix([])

        # ============================================
        # Declare pre_z
        self.pre_z = sympy.Matrix([])

        # ============================================
        # Declare x_dot
        der_P = sympy.symbols('der_P')
        der_Q = sympy.symbols('der_Q')
        der_R = sympy.symbols('der_R')
        der_U = sympy.symbols('der_U')
        der_V = sympy.symbols('der_V')
        der_W = sympy.symbols('der_W')
        der_h = sympy.symbols('der_h')
        der_phi = sympy.symbols('der_phi')
        der_psi = sympy.symbols('der_psi')
        der_theta = sympy.symbols('der_theta')
        der_x = sympy.symbols('der_x')
        der_y = sympy.symbols('der_y')
        self.x_dot = sympy.Matrix([
            der_P,
            der_Q,
            der_R,
            der_U,
            der_V,
            der_W,
            der_h,
            der_phi,
            der_psi,
            der_theta,
            der_x,
            der_y])

        # ============================================
        # Define Continous Update Function: fx
        self.fx = sympy.Matrix([
            aoa - (0.0),
            q - (((rho * (((U * U) + (V * V)) + (W * W))) / 2.0)),
            CL - ((CL0 + (CLa * aoa))),
            CD - ((CD0 + (k * CL))),
            L - ((CL * q)),
            F_x - ((t - ((m * g) * sin(theta)))),
            F_y - ((((m * g) * sin(phi)) * cos(theta))),
            F_z - ((((m * g) * cos(phi)) * cos(theta))),
            M_x - (a),
            M_y - (e),
            M_z - (r),
            der_x - (((((U * cos(theta)) * cos(psi)) + (V * (-((cos(phi) * sin(psi))) + ((sin(phi) * sin(theta)) * cos(psi))))) + (W * ((sin(phi) * sin(psi)) + ((cos(phi) * sin(theta)) * cos(psi)))))),
            der_y - (((((U * cos(theta)) * sin(psi)) + (V * ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi))))) + (W * (-((sin(phi) * cos(psi))) + ((cos(phi) * sin(theta)) * sin(psi)))))),
            der_h - ((((U * sin(theta)) - ((V * sin(phi)) * cos(theta))) - ((W * cos(phi)) * cos(theta)))),
            der_U - ((((R * V) - (Q * W)) + (F_x / m))),
            der_V - (((-((R * U)) + (P * W)) + (F_y / m))),
            der_W - ((((Q * U) - (P * V)) + (F_z / m))),
            der_phi - ((P + (tan(theta) * ((Q * sin(phi)) + (R * cos(phi)))))),
            der_theta - (((Q * cos(phi)) - (R * sin(phi)))),
            der_psi - ((((Q * sin(phi)) + (R * cos(phi))) / cos(theta))),
            (Lambda * der_P) - (((((((J_xz * ((J_x - J_y) + J_z)) * P) * Q) - ((((J_z * (J_z - J_y)) + (J_xz * J_xz)) * Q) * R)) + (J_z * M_x)) + (J_xz * M_z))),
            (J_y * der_Q) - ((((((J_z - J_x) * P) * R) - (J_xz * ((P * P) - (R * R)))) + M_y)),
            (Lambda * der_R) - (((((((((J_x - J_y) * J_x) + (J_xz * J_xz)) * P) * Q) - (((J_xz * ((J_x - J_y) + J_z)) * Q) * R)) + (J_xz * M_x)) + (J_x * M_z)))])
        self.fx = flatten_piecewise_with_nested_matrices(self.fx)

        # ============================================
        # Define Reset Functions: fr

        # ============================================
        # Define Condition Update Function: fc
        self.fc = sympy.Tuple(*[])
        self.f_c = sympy.lambdify(
            args=[self.time, self.x],
            expr=self.fc,
            modules=['numpy'])

        # ============================================
        # Events and Event callbacks

    def solve(self):
        # ============================================
        # Solve for explicit ODE
        v = sympy.Matrix(list(self.x_dot) + list(self.y))

        if isinstance(self.fx, sympy.Piecewise):
            sol_x_dot = []
            sol_y = []
            for arg in self.fx.args:
                condition = arg[1]
                sol_i = sympy.solve(arg[0], v)
                x_dot_i = sympy.Tuple(* [xi for xi in self.x_dot.subs(sol_i)])
                sol_x_dot.append((x_dot_i, condition))
                y_i = sympy.Tuple(* [yi for yi in self.y.subs(sol_i)])
                sol_y.append((y_i, condition))
            self.sol_x_dot = sympy.Piecewise(*sol_x_dot)
            self.sol_y = sympy.Piecewise(*sol_y)
        else:
            sol = sympy.solve(self.fx, v)
            print('sol', sol)
            self.sol_x_dot = sympy.Tuple(* [xi for xi in self.x_dot.subs(sol)])
            print('xdot', self.sol_x_dot)
            self.sol_y = sympy.Tuple(* [yi for yi in self.y.subs(sol)])
        
        self.f_x_dot = sympy.lambdify(
            args=[self.time, self.x, self.m, self.u, self.p, self.c],
            expr=self.sol_x_dot,
            modules=['numpy'])

        self.f_y = sympy.lambdify(
            args=[self.time, self.x, self.m, self.u, self.p, self.c],
            expr=self.sol_y,
            modules=['numpy'])

        self.solved = True

    def __repr__(self):
        return repr(self.__dict__)

    def simulate(self, t0, tf, dt, x0=None, f_u=None, max_events=100):
        """
        Simulate the modelica model
        """
        if not self.solved:
            self.solve()
        
        if f_u is None:
            def f_u(t):
                return np.zeros(self.u.shape[0])

        # ============================================
        # Declare initial vectors
        u0 = np.array([self.u0[k] for k in self.u0.keys()])
        p0 = np.array([self.p0[k] for k in self.p0.keys()])
        cp0 = np.array([self.cp0[k] for k in self.cp0.keys()])
        c0 = np.array([self.c0[k] for k in self.c0.keys()])
        m0 = np.array([self.m0[k] for k in self.m0.keys()])
        y0 = np.array([self.y0[k] for k in self.y0.keys()])
        z0 = np.array([self.z0[k] for k in self.z0.keys()])
        
        if x0 is None:
            x0 = np.array([self.x0[k] for k in self.x0.keys()])

        # ============================================
        # Declare Events
        events = []

        event_callback = {}

        # ============================================
        # Solve IVP
        event_count = 0
        t1 = tf
        data = {
            't': [],
            'x': [],
            'u': [],
            'y': [],
            'c': [],
        }

        while t0 < tf - dt:
            # check for max events
            if event_count > max_events:
                raise RuntimeError("Max events reached")
            
            # update conditions
            c0 = self.f_c(t0, x0)

            # solve ivp
            t_eval = np.arange(t0, tf, dt)
            res = scipy.integrate.solve_ivp(
                y0=x0,
                fun=lambda ti, x: self.f_x_dot(ti, x, m0, f_u(ti), p0, c0),
                t_span=[t_eval[0], t_eval[-1]],
                t_eval=t_eval,
                events=events,
            )

            # check for event
            x1 = res['y'][:, -1]
            t1 = res['t'][-1]
            if res.t_events is not None:
                event_count += 1
                for i, t_event in enumerate(res.t_events):
                    if len(t_event) > 0:
                        if i in event_callback:
                            x1 = event_callback[i](t_event[i], x1)

            # store data
            x = res['y']
            t = res['t']
            u = np.array([ f_u(ti) for ti in t ]).T
            y = np.array([ self.f_y(ti, xi, m0, ui, p0, c0) for (ti, xi, ui) in zip(t, x.T, u.T) ]).T
            data['x'].append(x)
            data['t'].append(t)
            data['u'].append(u)
            data['y'].append(y)
            data['c'].append(c0)

            # update for next step
            t0 = t1
            x0 = x1
        
        # convert lists to numpy array
        for k in data.keys():
            if len(data[k]) > 0:
                data[k] = np.hstack(data[k])
                
        return data
