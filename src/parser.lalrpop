use crate::tokens::{Token, LexicalError};
use crate::ast;

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;
    enum Token {
        // keywords
        "algorithm" => Token::KeywordAlgorithm,
        "and" => Token::KeywordAnd,
        "annotation" => Token::KeywordAnnotation,
        "block" => Token::KeywordBlock,
        "break" => Token::KeywordBreak,
        "class" => Token::KeywordClass,
        "connect" => Token::KeywordConnect,
        "connector" => Token::KeywordConnector,
        "constant" => Token::KeywordConstant,
        "constrainedby" => Token::KeywordConstrainedby,
        "der" => Token::KeywordDer,
        "discrete" => Token::KeywordDiscrete,
        "each" => Token::KeywordEach,
        "else" => Token::KeywordElse,
        "elseif" => Token::KeywordElseif,
        "elsewhen" => Token::KeywordElsewhen,
        "encapsulated" => Token::KeywordEncapsulated,
        "end" => Token::KeywordEnd,
        "enumeration" => Token::KeywordEnumeration,
        "equation" => Token::KeywordEquation,
        "expandable" => Token::KeywordExpandable,
        "extends" => Token::KeywordExtends,
        "external" => Token::KeywordExternal,
        "final" => Token::KeywordFinal,
        "flow" => Token::KeywordFlow,
        "for" => Token::KeywordFor,
        "function" => Token::KeywordFunction,
        "if" => Token::KeywordIf,
        "import" => Token::KeywordImport,
        "impure" => Token::KeywordImpure,
        "in" => Token::KeywordIn,
        "initial" => Token::KeywordInitial,
        "inner" => Token::KeywordInner,
        "input" => Token::KeywordInput,
        "loop" => Token::KeywordLoop,
        "model" => Token::KeywordModel,
        "not" => Token::KeywordNot,
        "operator" => Token::KeywordOperator,
        "or" => Token::KeywordOr,
        "outer" => Token::KeywordOuter,
        "output" => Token::KeywordOutput,
        "package" => Token::KeywordPackage,
        "parameter" => Token::KeywordParameter,
        "partial" => Token::KeywordPartial,
        "protected" => Token::KeywordProtected,
        "public" => Token::KeywordPublic,
        "pure" => Token::KeywordPure,
        "record" => Token::KeywordRecord,
        "redeclare" => Token::KeywordRedeclare,
        "replaceable" => Token::KeywordReplaceable,
        "return" => Token::KeywordReturn,
        "stream" => Token::KeywordStream,
        "then" => Token::KeywordThen,
        "boolean" => Token::Boolean,
        "type" => Token::KeywordType,
        "when" => Token::KeywordWhen,
        "while" => Token::KeywordWhile,
        "within" => Token::KeywordWithin,

        // other lexical tokens
        "identifier" => Token::Identifier(<String>),
        "unsigned_integer" => Token::UnsignedInteger(<i64>),
        "unsigned_real" => Token::UnsignedReal(<f64>),
        "boolean" => Token::Boolean(<bool>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        ":=" => Token::Assign,
        "=" => Token::Equal,
        ";" => Token::Semicolon,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
        ".+" => Token::OperatorElemAdd,
        ".-" => Token::OperatorElemSub,
        ".*" => Token::OperatorElemMul,
        "./" => Token::OperatorElemDiv,
    }
}

pub StoredDefinition: ast::StoredDefinition = {
    <classes:ClassDefinition*> => {
        ast::StoredDefinition{
            classes: classes
        }
    }
}

pub ClassDefinition: ast::ClassDefinition = {
    <partial: "partial"?> <class_type: ClassType> <name:"identifier">
    <components: ComponentSection>
    <equations: EquationSection?>
    <algorithms: AlgorithmSection?>
    "end" "identifier" ";" => {
        ast::ClassDefinition {
            name: name,
            class_type: class_type,
            partial: partial.is_some(),
            components: components,
            equations: equations,
            algorithms: algorithms
        }
    }
}

pub ClassType: ast::ClassType = {
    "model" => ast::ClassType::Model,
    "record" => ast::ClassType::Record,
    "operator" "record" => ast::ClassType::OperatorRecord,
    "block" => ast::ClassType::Block,
    "expandable" "connector" => ast::ClassType::ExpandableConnector,
    "connector" => ast::ClassType::Connector,
    "type" => ast::ClassType::Type,
    "package" => ast::ClassType::Package,
}

pub ComponentSection: Vec<ast::ComponentDeclaration> = {
    <components:ComponentDeclaration*> => components
}

pub ComponentDeclaration: ast::ComponentDeclaration = {
    <class:"identifier"> <name:"identifier"> ";" => {
        ast::ComponentDeclaration{
            name,
            class
        }
    },
}

/*
 equation-section :
   [ initial ] equation { equation ";" } 
TODO
 * handle initial
*/
pub EquationSection: Vec<ast::Equation> = {
    <_initial:"initial"?> "equation" <equations:Equation*> => equations
}

/*
 algorithm-section :
   [ initial ] algorithm { statement ";" }
TODO
 * handle initial
*/
pub AlgorithmSection: Vec<ast::Statement> = {
    <_initial:"initial"?> "algorithm" <statements:Statement*> => statements
}

/*
 equation :
   ( simple-expression "=" expression
     | if-equation
     | for-equation
     | connect-equation
     | when-equation
     | component-reference function-call-args
   )
   description
*/
pub Equation: ast::Equation = {
    <lhs:Expression> "=" <rhs:Expression> ";" => {
        ast::Equation::Simple {
            lhs,
            rhs
        }
    },
    "der" "(" <lhs:Expression> ")" "=" <rhs:Expression> ";" => {
        ast::Equation::Simple {
            lhs,
            rhs
        }
    },
}

/*
 if-equation :
   if expression then
     { equation ";" }
   { elseif expression then
     { equation ";" }
   }
   [ else
     { equation ";" }
   ]
*/
pub IfEquation: ast::Equation = {
    "if" <if_cond:Expression> "then" <if_eqs:Equation*> ";"
    <else_if_blocks: ElseIfEquationBlock*>
    <else_eqs: ElseEquationBlock?>
    "end" "if" => {
        ast::Equation::If {
            if_cond, if_eqs,
            else_if_blocks,
            else_eqs,
        }
    }
}

pub ElseIfEquationBlock: ast::EquationBlock = {
    "elseif" <cond:Expression> "then" <eqs:Equation*> ";" => {
        ast::EquationBlock {
            cond, eqs
        }
    }
}

pub ElseEquationBlock: Vec<ast::Equation> = {
    "else" <eqs:Equation*> ";" => {
        eqs
    }
}

/*
 if-statement :
   if expression then
     { statement ";" }
   { elseif expression then
     { statement ";" }
   }
   [ else
     { statement ";" }
   ]
*/
pub IfStatement: ast::Statement = {
    "if" <if_cond:Expression> "then" <if_eqs:Statement*> ";"
    <else_if_blocks: ElseIfStatementBlock*>
    <else_eqs: ElseStatementBlock?>
    "end" "if" => {
        ast::Statement::If {
            if_cond, if_eqs,
            else_if_blocks,
            else_eqs,
        }
    }
}

pub ElseIfStatementBlock: ast::StatementBlock = {
    "elseif" <cond:Expression> "then" <eqs:Statement*> ";" => {
        ast::StatementBlock {
            cond, eqs
        }
    }
}

pub ElseStatementBlock: Vec<ast::Statement> = {
    "else" <eqs:Statement*> ";" => {
        eqs
    }
}


/*
 component-reference :
   [ "." ] IDENT [ array-subscripts ] { "." IDENT [ array-subscripts ] }
*/
pub ComponentReference: ast::ComponentReference = {
    <name:"identifier"> => {
        ast::ComponentReference{
            name
        }
    },
}

pub Statement: ast::Statement = {
    <comp: ComponentReference> ":=" <expr:Expression> ";" => {
        ast::Statement::Assignment{
            comp,
            expr
        }
    },

}

/*
=============================================================================
A.2.7 Expressions
=============================================================================
expression :
   simple-expression
   | if expression then expression
     { elseif expression then expression }
     else expression 
simple-expression :
   logical-expression [ ":" logical-expression [ ":" logical-expression ] ]
logical-expression :
   logical-term { or logical-term }
logical-term :
   logical-factor { and logical-factor }
logical-factor :
   [ not ] relation
relation :
   arithmetic-expression [ relational-operator arithmetic-expression ]
relational-operator :
   "<" | "<=" | ">" | ">=" | "==" | "<>"
arithmetic-expression :
   [ add-operator ] term { add-operator term }
add-operator :
   "+" | "-" | ".+" | ".-"
term :
   factor { mul-operator factor }
mul-operator :
   "*" | "/" | ".*" | "./"
factor :
   primary [ ( "^" | ".^" ) primary ]
*/
pub Expression: Box<ast::Expression> = {
    #[precedence(level="1")]
    Term,

    #[precedence(level="2")] #[assoc(side="left")]
    <lhs:Expression> "*" <rhs:Expression> => {
        Box::new(ast::Expression::Mul {
            lhs,
            rhs
        })
    },
    <lhs:Expression> ".*" <rhs:Expression> => {
        Box::new(ast::Expression::ElemMul {
            lhs,
            rhs
        })
    },
    <lhs:Expression> "/" <rhs:Expression> => {
        Box::new(ast::Expression::Div {
            lhs,
            rhs
        })
    },
    <lhs:Expression> "./" <rhs:Expression> => {
        Box::new(ast::Expression::ElemDiv {
            lhs,
            rhs
        })
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <lhs:Expression> "+" <rhs:Expression> => {
        Box::new(ast::Expression::Add {
            lhs,
            rhs
        })
    },
    <lhs:Expression> ".+" <rhs:Expression> => {
        Box::new(ast::Expression::ElemAdd {
            lhs,
            rhs
        })
    },
    <lhs:Expression> "-" <rhs:Expression> => {
        Box::new(ast::Expression::Sub {
            lhs,
            rhs
        })
    },
    <lhs:Expression> ".-" <rhs:Expression> => {
        Box::new(ast::Expression::ElemSub {
            lhs,
            rhs
        })
    },
}

/*
 primary :
   UNSIGNED-NUMBER
   | STRING
   | false
   | true
   | ( component-reference | der | initial | pure ) function-call-args
   | component-reference
   | "(" output-expression-list ")" [ ( array-subscripts | "." IDENT ) ]
   | "[" expression-list { ";" expression-list } "]"
   | "{" array-arguments "}"
   | end 
*/
pub Term: Box<ast::Expression> = {
    <val:"unsigned_integer"> => {
        Box::new(ast::Expression::UnsignedInteger(val))
    },
    <val:"unsigned_real"> => {
        Box::new(ast::Expression::UnsignedReal(val))
    },
    <val:"boolean"> => {
        Box::new(ast::Expression::Boolean(val))
    },
    <comp:ComponentReference> => {
        Box::new(ast::Expression::Ref{comp})
    },
    "(" <Expression> ")",
}
